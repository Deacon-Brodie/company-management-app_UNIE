name: Veracode SAST + SCA

on: [push, pull_request]

jobs:
  register:
   runs-on: ubuntu-latest
   name: register
   steps:
     - name: Register build
       id: register-build
       uses: veracode/github-actions-integration-helper@v0.1.6
       with:
         action: registerBuild
         token: ${{ github.event.client_payload.token }}
         appname: ${{ github.event.client_payload.user_config.profile_name }}
         source_repository: ${{ github.event.client_payload.repository.full_name }}
         check_run_id: ${{ github.run_id }}
         check_run_name: ${{ github.workflow }}
         head_sha: ${{ github.event.client_payload.sha }}
         event_type: ${{ github.event.client_payload.event_type }}
         branch: ${{ github.event.client_payload.user_config.sandbox_scan.branch }}
         issue_trigger_flow: ${{ github.event.client_payload.user_config.issue_trigger_flow }}
         
  veracode_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v3

      - name: Instalar Veracode CLI
        run: |
          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          ./veracode version

      - name: Ejecutar an√°lisis SAST
        env:
          VERACODE_API_KEY_ID: ${{ secrets.VERACODE_API_ID }}
          VERACODE_API_KEY_SECRET: ${{ secrets.VERACODE_API_KEY_SECRET }}
        run: |
          ./veracode scan --source . --type repo --app-id	app_company_unie --format json --output sast-result.json
          echo "üìÑ Resultado SAST:"
          cat sast-result.json
          if jq -e '.findings[] | select(.severity=="CRITICAL")' sast-result.json; then
            echo "‚ùå Vulnerabilidades CR√çTICAS detectadas en SAST"
            exit 1
          else
            echo "‚úÖ SAST limpio de vulnerabilidades cr√≠ticas"
          fi


      - name: Ejecutar an√°lisis SCA (dependencias)
        env:
          VERACODE_API_KEY_ID: ${{ secrets.VERACODE_API_ID }}
          VERACODE_API_KEY_SECRET: ${{ secrets.VERACODE_API_KEY }}
        run: |
          ./veracode sbom --source . --format cyclonedx-json --output sbom.json
          ./veracode scan --type sca --source sbom.json --format json --output sca-result.json
          echo "üìÑ Resultado SCA:"
          cat sca-result.json
          if jq -e '.findings[] | select(.severity=="CRITICAL")' sca-result.json; then
            echo "‚ùå Vulnerabilidades CR√çTICAS detectadas en SCA"
            exit 1
          else
            echo "‚úÖ SCA limpio de vulnerabilidades cr√≠ticas"
          fi
