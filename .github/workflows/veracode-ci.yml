name: Veracode SAST + SCA

on: [push, pull_request]

jobs:
  veracode_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Instalar Veracode CLI v2
        run: |
          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          ./veracode version

      - name: Crear archivo ZIP del código fuente
        run: |
          zip -r veracode_package.zip . -x "*.git*" "__pycache__/*" "*.venv*" "*.idea*" "*.md"

      - name: Ejecutar análisis SAST (código fuente)
        env:
          VERACODE_API_KEY_ID: ${{ secrets.VERACODE_API_ID }}
          VERACODE_API_KEY_SECRET: ${{ secrets.VERACODE_API_KEY_SECRET }}
        run: |
          ./veracode scan --source veracode_package.zip --type archive --format json --output sast-result.json
          cat sast-result.json
          if jq -e '.findings[] | select(.severity=="CRITICAL")' sast-result.json; then
            echo "❌ Vulnerabilidades CRÍTICAS detectadas en SAST"
            exit 1
          else
            echo "✅ SAST limpio"
          fi

      - name: Ejecutar análisis SCA (dependencias)
        env:
          VERACODE_API_KEY_ID: ${{ secrets.VERACODE_API_ID }}
          VERACODE_API_KEY_SECRET: ${{ secrets.VERACODE_API_KEY_SECRET }}
        run: |
          ./veracode sbom --source https://github.com/Deacon-Brodie/company-management-app_UNIE/ --type repo --format cyclonedx-json --output sbom.json
          ./veracode scan --type sca --source sbom.json --format json --output sca-result.json
          cat sca-result.json
          if jq -e '.findings[] | select(.severity=="CRITICAL")' sca-result.json; then
            echo "❌ Vulnerabilidades CRÍTICAS detectadas en SCA"
            exit 1
          else
            echo "✅ SCA limpio"
          fi